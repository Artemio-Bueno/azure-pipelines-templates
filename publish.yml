parameters:
  python_versions:
    - 3.7
    - 3.6

jobs:
- ${{ each target in parameters.targets }}:

  - ${{ if or(eq(target, 'wheels_macos'), eq(target, 'wheels_linux'), eq(target, 'wheels_windows')) }}:

    - job: ${{ target }}
      dependsOn: ${{ parameters.dependsOn }}
      condition: succeeded()

      variables:
        CIBW_TEST_COMMAND: ${{ parameters.test_command }}
        CIBW_TEST_EXTRAS: ${{ parameters.test_extras }}

      pool:
        ${{ if eq(target, 'wheels_macos') }}:
          vmImage: macOS 10.13
        ${{ if eq(target, 'wheels_linux') }}:
          vmImage: Ubuntu 16.04
        ${{ if eq(target, 'wheels_windows') }}:
          vmImage: vs2017-win2016

      steps:
        - checkout: self
          submodules: ${{ coalesce(parameters.submodules, true) }}
          fetchDepth: 999999999
        - ${{ if not(eq(target, 'wheels_windows')) }}:
          - task: UsePythonVersion@0
            inputs:
              versionSpec: ${{ parameters.python_versions[0] }}
        - ${{ if eq(target, 'wheels_windows') }}:
          - ${{ each version in parameters.python_versions }}:
            - task: UsePythonVersion@0
              inputs:
                versionSpec: ${{ version }}
        - bash: python -m pip install --upgrade pip
          displayName: Upgrading pip
        - bash: python -m pip install git+https://github.com/joerick/cibuildwheel.git
          displayName: Installing cibuildwheel
        - bash: cibuildwheel --output-dir wheelhouse .
          displayName: Running cibuildwheel
        - publish: 'wheelhouse'
          artifact: ${{ target }}

  - ${{ if eq(target, 'sdist') }}:
    - job: ${{ target }}
      dependsOn: ${{ parameters.dependsOn }}
      condition: succeeded()
      pool:
        vmImage: 'Ubuntu-16.04'
      steps:
      - checkout: self
        submodules: ${{ coalesce(parameters.submodules, true) }}
        fetchDepth: 999999999
      - task: UsePythonVersion@0
        displayName: setup python3.7
        inputs:
          versionSpec: '3.7'
      - script: 'python -m pip install -U --user --force-reinstall pep517 setuptools_scm'
        displayName: "Install build tools"
      - script: 'python -m pep517.build --source --out-dir wheelhouse .'
        displayName: "Build source distribution"
      - ${{ if parameters.test_extras }}:
        - script: ${{ format('python -m pip install --force-reinstall $(find wheelhouse -name "*.tar.gz")[{0}]', parameters.test_extras) }}
          displayName: "Installing source distribution"
      - ${{ if not(parameters.test_extras) }}:
        - script: 'python -m pip install $(find wheelhouse -name "*.tar.gz")'
          displayName: "Installing source distribution"
      - ${{ if parameters.test_command }}:
        - script: ${{ parameters.test_command }}
          displayName: "Test source distribution"
          workingDirectory: $(Agent.TempDirectory)
      - publish: 'wheelhouse'
        artifact: ${{ target }}

  - ${{ if eq(target, 'wheels_universal') }}:
    - job: ${{ target }}
      dependsOn: ${{ parameters.dependsOn }}
      condition: succeeded()
      pool:
        vmImage: 'Ubuntu-16.04'
      steps:
      - checkout: self
        submodules: ${{ coalesce(parameters.submodules, true) }}
        fetchDepth: 999999999
      - task: UsePythonVersion@0
        displayName: setup python3.7
        inputs:
          versionSpec: '3.7'
      - script: 'python -m pip install -U --user --force-reinstall pep517 setuptools_scm'
        displayName: "Install build tools"
      - script: 'python -m pep517.build --binary --out-dir wheelhouse .'
        displayName: "Build universal wheel"
      - ${{ if parameters.test_extras }}:
        - script: ${{ format('python -m pip install --force-reinstall $(find wheelhouse -name "*.whl")[{0}]', parameters.test_extras) }}
          displayName: "Installing universal wheel"
      - ${{ if not(parameters.test_extras) }}:
        - script: 'python -m pip install $(find wheelhouse -name "*.whl")'
          displayName: "Installing universal wheel"
      - ${{ if parameters.test_command }}:
        - script: ${{ parameters.test_command }}
          displayName: "Test universal wheel"
          workingDirectory: $(Agent.TempDirectory)
      - publish: 'wheelhouse'
        artifact: ${{ target }}

- ${{ if coalesce(parameters.pypi_connection_name, parameters.artifact_feed) }}:
  - job: publish
    dependsOn: ${{ parameters.targets }}
    condition: succeeded()

    pool:
      vmImage: 'Ubuntu-16.04'

    steps:
    - checkout: none
    - task: UsePythonVersion@0
      inputs:
        versionSpec: '3.7'
      displayName: Install Python 3.7
    - script: 'python -m pip install -U --user --force-reinstall twine'
      displayName: "install twine"
    # Get all artifacts from this build
    - ${{ each target in parameters.targets }}:
      - task: DownloadPipelineArtifact@2
        inputs:
          buildType: 'current'
          targetPath: 'wheelhouse'
          artifactName: ${{ target }}
    - script: 'ls -R wheelhouse'

    - ${{ if parameters.pypi_connection_name }}:
      - task: TwineAuthenticate@1
        inputs:
          pythonUploadServiceConnection: ${{ parameters.pypi_connection_name}}
      - script:  ${{ format('python -m twine upload --skip-existing -r {0} --config-file $(PYPIRC_PATH) "wheelhouse/*"', coalesce(parameters.pypi_endpoint_name, parameters.pypi_connection_name)) }}
        displayName: "upload sdist and wheels to PyPI"

    - ${{ if parameters.artifact_feed }}:
      - task: TwineAuthenticate@1
        inputs:
          artifactFeeds: ${{ parameters.artifact_feed}}
      - script:  ${{ format('python -m twine upload --skip-existing -r {0} --config-file $(PYPIRC_PATH) "wheelhouse/*"', parameters.artifact_feed) }}
        displayName: "upload sdist and wheels to Artifacts feed"
